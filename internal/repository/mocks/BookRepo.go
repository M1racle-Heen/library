// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/M1racle-Heen/library/internal/domain"
)

// BookRepo is an autogenerated mock type for the BookRepo type
type BookRepo struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *BookRepo) Get(id string) (*domain.Book, error) {
	ret := _m.Called(id)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(string) *domain.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: id
func (_m *BookRepo) Remove(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: book
func (_m *BookRepo) Store(book domain.Book) (*domain.Book, error) {
	ret := _m.Called(book)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(domain.Book) *domain.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
